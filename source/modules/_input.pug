//-------------------------------------------------------
//- Modules :: Input
//-------------------------------------------------------

mixin input-field({ type, placeholder, value })
  input.form-control(
    type= type ? type : 'text'
    placeholder= placeholder ? placeholder : null
    value= value ? value : null
  )&attributes(attributes)

mixin group-input-field({id, type, size, placeholder, value, iconBefore, isMultiple, min, max, step, desc, labelFile, buttonFile, isValid, isInvalid, noticeError, noticeSuccess, iconError, disabled, readonly, label, abbreviationLabel, abbreviationTitle, badgeLabelType, badgeLabelText, iconTogglePassword, textTogglePassword,hasSpinner, spinnerType, spinnerSize, clearableIcon})
  .form-group.form-customize()&attributes(attributes)
    if label
      .form-header
        label.form-label(
          for= id ? `${id}` : null
          class= size ? `form-label--${size}` : null
        )
          | #{label}
          if abbreviationLabel
            abbr(title= `${abbreviationTitle}`)
              | #{abbreviationLabel}
          if badgeLabelText
            span.badge(
              class= badgeLabelType ? `badge--${badgeLabelType}` : null
            )
              | #{badgeLabelText}
        if type=== 'password'
          a.toggle-password-button.js-toggle-password-button(
            href= '#'
            data-toggle='password'
          )
            if iconTogglePassword
              i(
                class= iconTogglePassword ? `${iconTogglePassword}` : null
              )
            if textTogglePassword
              span.toggle-password-text
                | #{textTogglePassword}
    .input-field(
      class= size ? `input-field--${size}` : null
      class= isValid ? `input-field--valid` : null
      class= isInvalid ? `input-field--invalid` : null
      class= iconBefore ? `input-field--icon-before` : null
    ) 
      input.form-control(
        id= id ? `${id}` : null
        type= type ? `${type}` : 'text'
        placeholder= placeholder ? `${placeholder}` : null
        min= min ? `${min}` : null
        max= max ? `${max}` : null
        step= step ? `${step}` : null
        readonly= readonly ? 'readonly' : null
        value= value ? `${value}` : null
        multiple= isMultiple ? 'multiple' : null
        disabled= disabled ? 'disabled' : null
        class= (type==='file') ? 'custom-file-input js-custom-file-input' : null
        class= (type==='password') ? 'js-custom-password-input' : null
        class= clearableIcon ? 'js-clearable-input' : null
      )
      if iconBefore
        .input-field__icon.input-field__icon--before
          i(class= iconBefore ? `${iconBefore}` : null)
      if clearableIcon
        button.clearable-button.js-clearable-button.close(
          type= 'button'
          aria-label= 'Close'
        )
          span(aria-hidden= 'true')
            i(class= clearableIcon)
      if type === 'file'
        if labelFile
          label.custom-file-label.js-custom-file-label
            | #{labelFile}
      if type === 'number'
        .custom-number-controls
          .custom-number-button.custom-number-button--plus.js-custom-number-plus
            i.fas.fa-plus
          .custom-number-button.custom-number-button--minus.js-custom-number-minus
            i.fas.fa-minus
      if hasSpinner
        .spinner-border(
          class= spinnerType ? `${spinnerType}` : null
          class= spinnerSize ? `spinner-border-${spinnerSize}` : null
          role= 'status'
        )
          span.sr-only
            | Loading...
      if desc
        p.note-text
          | #{desc}
      if noticeSuccess
        p.success-notice
          | #{noticeSuccess}
      if noticeError
        .error-notice
          if iconError
            i(
              class= iconError ? `${iconError}` : null
            )
          | #{noticeError}

mixin group-input-field-floating-label({id, type, size, placeholder, value, isValid, isInvalid, noticeError, noticeSuccess, iconError, disabled, readonly, label, hasSpinner, spinnerType, spinnerSize})
  .form-group.form-customize
    .input-field.input-field--floating-label(
      class= size ? `input-field--${size}` : null
      class= isValid ? `input-field--valid` : null
      class= isInvalid ? `input-field--invalid` : null
    )
      input.form-control.js-custom-input-floating-label(
        id= id ? `${id}` : null
        type= type ? `${type}` : 'text'
        placeholder= placeholder ? `${placeholder}` : null
        readonly= readonly ? 'readonly' : null
        value= value ? `${value}` : null
        disabled= disabled ? 'disabled' : null
        class= (type==='file') ? 'custom-file-input js-custom-file-input' : null
        class= (type==='password') ? 'js-custom-password-input' : null
      )&attributes(attributes)
      if label
        label.form-label(
          for= id ? `${id}` : null
          class= size ? `form-label--${size}` : null
        )
          | #{label}
      if type === 'file'
        if labelFile
          label.custom-file-label.js-custom-file-label
            | #{labelFile}
      if hasSpinner
        .spinner-border(
          class= spinnerType ? `${spinnerType}` : null
          class= spinnerSize ? `spinner-border-${spinnerSize}` : null
          role= 'status'
        )
          span.sr-only
            | Loading...
      if noticeSuccess
        p.success-notice
          | #{noticeSuccess}
      if noticeError
        .error-notice
          if iconError
            i(
              class= iconError ? `${iconError}` : null
            )
          | #{noticeError}
